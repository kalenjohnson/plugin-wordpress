<?php
namespace FatPanda\WordPress;

use Illuminate\Filesystem\Filesystem;

/**
 * Manage a scratch space for testing plugins.
 */
class PluginWorkbench {

	function __construct()
	{
		$this->fs = new Filesystem();
	}

	function cleanup()
	{
		$path = static::getFilePath();
		if (file_exists($path)) {
			$allFiles = $this->fs->allFiles($path);
			$this->fs->delete($allFiles);
			$this->fs->deleteDirectory($path);
		}
	}

	function reset()
	{
		$this->cleanup();
		$this->create();
	}

	function create()
	{
		$this->fs->makeDirectory(self::getFilePath());
	}

	function makeDirectory($dir)
	{
		$this->fs->makeDirectory(self::getFilePath().'/'.ltrim($dir, '/'), 0755, true);
	}

	static function getFilePath()
	{
		return realpath(dirname(__FILE__).'/../').'/.workbench-cache';
	}

	/**
	 * Begin interactive process of generating a new WordPress plugin project.
	 * @param Object Something that Composer provides us with when the create-project event is fired
	 * @param String Optionally, an output path that is alternative to the base path of this plugin
	 * @return Array of the data collected, including paths to the files generated by the process
	 */
	static function createPlugin($mixed, $output_path = null)
	{
		// make sure we've bootstrapped Composer
		require_once static::getBasePath().'/vendor/autoload.php';

		if (empty($output_path)) {
			$output_path = static::getBasePath();
		}
		$output_path = rtrim($output_path, '/');

		$tokens = [];

		// make sure we have a stub to work with
		try {
			$plugin = static::getStub('plugin');
			$main = static::getStub('main');
			$composer = static::getStub('composer');
		} catch (\Exception $e) {
			\cli\out("%1".$e->getMessage()."%n\n");
			exit;
		}

		\cli\out("%4Let's create a WordPress plugin!%n\n");
		
		$tokens['@@PLUGIN_NAME@@'] = \cli\prompt("What do you want to call your plugin?", "My Plugin");
		$tokens['@@PLUGIN_DESCRIPTION@@'] = \cli\prompt("What will this plugin do? Be succinct.", "Do something amazing.");

		$tokens['@@PLUGIN_LICENSE@@'] = \cli\prompt("What should the plugin license be?", "GPL2");
		$tokens['@@PLUGIN_LICENSE_URI@@'] = \cli\prompt("At what URL can more information about the license be found?", 
			"https://www.gnu.org/licenses/gpl-2.0.html");

		$tokens['@@PLUGIN_CLASS_NAME@@'] = Str::studly($tokens['@@PLUGIN_NAME@@']);
		$tokens['@@PLUGIN_VAR_NAME@@'] = '_' . Str::slug($tokens['@@PLUGIN_NAME@@'], '_');

		$tokens['@@PLUGIN_VERSION@@'] = \cli\prompt("What should the base version be?", "1.0.0");
		
		$tokens['@@PLUGIN_AUTHOR@@'] = \cli\prompt("Who is the author of this plugin?", get_current_user());
		
		$tokens['@@PLUGIN_AUTHOR_URI@@'] = \cli\prompt("What is the URL of the author's homepage?", 
			"https://github.com/" . Str::slug($tokens['@@PLUGIN_AUTHOR@@']));
		
		$tokens['@@PLUGIN_URI@@'] = \cli\prompt("What is the URL of this project's homepage?", 
			 rtrim($tokens['@@PLUGIN_AUTHOR_URI@@'], '/') . '/' . Str::slug($tokens['@@PLUGIN_NAME@@']));

		$tokens['@@PLUGIN_NAMESPACE@@'] = \cli\prompt("What should the PHP namespace be for your plugin?", 
				Str::studly($tokens['@@PLUGIN_AUTHOR@@']) . '\\' . Str::studly($tokens['@@PLUGIN_NAME@@']));

		$tokens['@@PLUGIN_TEXT_DOMAIN@@'] = \cli\prompt("What is this plugin's text domain?", Str::slug($tokens['@@PLUGIN_NAME@@']));

		$tokens['@@PLUGIN_DOMAIN_PATH@@'] = \cli\prompt("Where will this plugin's translation files be stored?", "/lang");

		$tokens['@@COMPOSER_NAME@@'] = \cli\prompt("What should the Composer project name be?", 
				Str::slug($tokens['@@PLUGIN_AUTHOR@@']) . '/' . Str::slug($tokens['@@PLUGIN_NAME@@']));

		$plugin_file = $output_path.'/src/plugin.php';
		if (file_exists($plugin_file)) {
			throw new \Exception("Can't create $plugin_file: it already exists.");
		}

		$main_file_name = \cli\prompt("What should we name the plugin's main file?", 
				Str::slug($tokens['@@PLUGIN_NAME@@']).".php");
		$main_file = $output_path.'/'.$main_file_name;
		if (file_exists($main_file)) {
			throw new \Exception("Can't create $main_file: it already exists.");
		}

		$composer_file = $output_path.'/composer.json';

		file_put_contents($main_file, str_replace(array_keys($tokens), array_values($tokens), $main));
		file_put_contents($plugin_file, str_replace(array_keys($tokens), array_values($tokens), $plugin));
		file_put_contents($composer_file, str_replace(array_keys($tokens), array_values($tokens), $composer));

		// delete the cleanup test
		$test_file = $output_path.'/tests/TestPluginCreate.php';
		if (file_exists($test_file)) {
			unlink($test_file);
		}

		return [
			'tokens' => $tokens,
			'files' => [ 
				'main' => $main_file, 
				'plugin' => $plugin_file,
				'composer' => $composer_file
			]
		];
	}

	static function getBasePath()
	{
		return realpath(__DIR__.'/../');
	}

	static function getStub($stub)
	{
		$file = self::getBasePath().'/stubs/'.$stub.'.stub';
		if (!file_exists($file)) {
			throw new \Exception("Can't find stub for '$stub'; looked in $file. Maybe withfatpanda/plugin-wordpress is corrupted?");
		}
		return file_get_contents($file);
	}
	
}